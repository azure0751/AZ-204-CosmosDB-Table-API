@model List<CosmosDBTableApiDemo.Models.DynamicEntity>

<h2>Enter Data to Insert into Cosmos DB Table</h2>

<form asp-action="Index" method="post">
    <table>
        <tr>
            <td><label>Connection String:</label></td>
            <td><input type="text" name="connectionString" required /></td>
        </tr>
        <tr>
            <td><label>Table Name:</label></td>
            <td><input type="text" name="tableName" required /></td>
        </tr>
        <tr>
            <td><label>Partition Key:</label></td>
            <td><input type="text" name="partitionKey" required /></td>
        </tr>
        <tr>
            <td><label>Row Key:</label></td>
            <td><input type="text" name="rowKey" required /></td>
        </tr>
    </table>


    <h3>Entity Properties</h3>
    <table id="propertiesTable">
        <thead>
            <tr>
                <th>Property Name</th>
                <th>Property Value</th>
                <th>Type</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="properties">
            <tr class="property">
                <td>
                    <input type="text" name="properties[0].Key" placeholder="Property Name" />
                </td>
                <td>
                    <input type="text" name="properties[0].Value" placeholder="Property Value" />
                </td>
                <td>
                    <select name="properties[0].Type">
                        <option value="string">String</option>
                        <option value="int">Integer</option>
                        <option value="bool">Boolean</option>
                        <!-- Add more data types as needed -->
                    </select>
                </td>
                <td>
                    <button type="button" onclick="removeProperty(this)">Remove</button>
                </td>
            </tr>
        </tbody>
    </table>
    <button type="button" onclick="addProperty()">Add Property</button>

    <button type="submit">Insert</button>
</form>

@if (Model != null && Model.Any())
{
    <h2>Inserted Data</h2>
    <table>
        <thead>
            <tr>
                <th>Partition Key</th>
                <th>Row Key</th>
                <th>Properties</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in Model)
            {
                <tr>
                    <td>@entity.PartitionKey</td>
                    <td>@entity.RowKey</td>
                    <td>
                        @foreach (var prop in entity.Properties)
                        {
                            <div>@prop.Key: @prop.Value</div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No data available.</p>
}

@section Scripts {
    <script>
        let propertyIndex = 1;

        function addProperty() {
            const propertiesTable = document.getElementById("properties");
            const newPropertyRow = document.createElement("tr");
            newPropertyRow.classList.add("property");

            newPropertyRow.innerHTML = `
                        <td>
                            <input type="text" name="properties[${propertyIndex}].Key" placeholder="Property Name" />
                        </td>
                        <td>
                            <input type="text" name="properties[${propertyIndex}].Value" placeholder="Property Value" />
                        </td>
                        <td>
                            <select name="properties[${propertyIndex}].Type">
                                <option value="string">String</option>
                                <option value="int">Integer</option>
                                <option value="bool">Boolean</option>
                            </select>
                        </td>
                        <td>
                            <button type="button" onclick="removeProperty(this)">Remove</button>
                        </td>
                    `;

            propertiesTable.appendChild(newPropertyRow);
            propertyIndex++;
        }

        function removeProperty(button) {
            button.parentElement.parentElement.remove();
        }
    </script>
}
